{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4287d79a",
   "metadata": {
    "papermill": {
     "duration": 0.009036,
     "end_time": "2024-10-02T01:49:57.714760",
     "exception": false,
     "start_time": "2024-10-02T01:49:57.705724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fraud Detection Model:\n",
    "Start with handling your dataset. \n",
    "* Import the Credit Card Fraud dataset. \n",
    "* Align and split the data into test and training.\n",
    "* Handle imbalances"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a614d9f",
   "metadata": {
    "papermill": {
     "duration": 0.008192,
     "end_time": "2024-10-02T01:49:57.731629",
     "exception": false,
     "start_time": "2024-10-02T01:49:57.723437",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 1: Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a8cf4d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:49:57.750803Z",
     "iopub.status.busy": "2024-10-02T01:49:57.749868Z",
     "iopub.status.idle": "2024-10-02T01:50:00.971654Z",
     "shell.execute_reply": "2024-10-02T01:50:00.970552Z"
    },
    "papermill": {
     "duration": 3.234004,
     "end_time": "2024-10-02T01:50:00.974169",
     "exception": false,
     "start_time": "2024-10-02T01:49:57.740165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix, roc_curve\n",
    "from imblearn.over_sampling import SMOTE\n",
    "import joblib\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b239933a",
   "metadata": {
    "papermill": {
     "duration": 0.00896,
     "end_time": "2024-10-02T01:50:00.991868",
     "exception": false,
     "start_time": "2024-10-02T01:50:00.982908",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 2: Load and Align the Credit Card Fraud Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "808e421a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:50:01.011938Z",
     "iopub.status.busy": "2024-10-02T01:50:01.011392Z",
     "iopub.status.idle": "2024-10-02T01:50:04.980359Z",
     "shell.execute_reply": "2024-10-02T01:50:04.979030Z"
    },
    "papermill": {
     "duration": 3.98139,
     "end_time": "2024-10-02T01:50:04.982892",
     "exception": false,
     "start_time": "2024-10-02T01:50:01.001502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the full dataset \n",
    "data = pd.read_csv('/kaggle/input/creditcardfraud/creditcard.csv')\n",
    "\n",
    "X = data.drop(columns=['Class'])  # Adjust if your target column has a different name\n",
    "y = data['Class']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48278cc0",
   "metadata": {
    "papermill": {
     "duration": 0.009134,
     "end_time": "2024-10-02T01:50:05.001430",
     "exception": false,
     "start_time": "2024-10-02T01:50:04.992296",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 3: Split the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70397941",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:50:05.020912Z",
     "iopub.status.busy": "2024-10-02T01:50:05.020484Z",
     "iopub.status.idle": "2024-10-02T01:50:05.223255Z",
     "shell.execute_reply": "2024-10-02T01:50:05.222258Z"
    },
    "papermill": {
     "duration": 0.21513,
     "end_time": "2024-10-02T01:50:05.225772",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.010642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33190534",
   "metadata": {
    "papermill": {
     "duration": 0.008391,
     "end_time": "2024-10-02T01:50:05.242818",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.234427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 4: Handle Imbalance\n",
    "Herer we are going to use SMOTE to handle the significant class imbalance from our credit card dataset. We originally had issues with overfitting due to the class imbalance from the fraud dataset. The imbalance is common in this type of dataset but in order to get accurate predictions we will need to balance it.\n",
    "\n",
    "When first applying SMOTE we had a perfect balance in class distribution, which was not realistic. So we had to tweak the sampling strategy strategy and you may need to make more adjustments as needed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "10457e86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:50:05.263190Z",
     "iopub.status.busy": "2024-10-02T01:50:05.261955Z",
     "iopub.status.idle": "2024-10-02T01:50:05.756781Z",
     "shell.execute_reply": "2024-10-02T01:50:05.754875Z"
    },
    "papermill": {
     "duration": 0.507515,
     "end_time": "2024-10-02T01:50:05.759481",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.251966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class\n",
      "0    284315\n",
      "1    142157\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# Adjusting the sampling strategy so that the minority class is 50% the size of the majority class\n",
    "smote = SMOTE(sampling_strategy=0.5, random_state=42)  # 50% as many minority samples as majority\n",
    "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
    "\n",
    "print(y_resampled.value_counts())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdc2fb5c",
   "metadata": {
    "papermill": {
     "duration": 0.008624,
     "end_time": "2024-10-02T01:50:05.777329",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.768705",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 5: Build and Configure the Pipeline\n",
    "While troubleshooting the poor results, we found adding weights improved recall for the minority class. Adding class weights, combined with resampling allowed the model to correctly identify more fraud cases. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "deca0735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:50:05.796932Z",
     "iopub.status.busy": "2024-10-02T01:50:05.796539Z",
     "iopub.status.idle": "2024-10-02T01:50:05.801905Z",
     "shell.execute_reply": "2024-10-02T01:50:05.800645Z"
    },
    "papermill": {
     "duration": 0.017647,
     "end_time": "2024-10-02T01:50:05.804074",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.786427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('model', RandomForestClassifier(class_weight='balanced', random_state=42))\n",
    "])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4482dc07",
   "metadata": {
    "papermill": {
     "duration": 0.008382,
     "end_time": "2024-10-02T01:50:05.821242",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.812860",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 6: Train the Model on Resampled Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b5a87502",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:50:05.840163Z",
     "iopub.status.busy": "2024-10-02T01:50:05.839767Z",
     "iopub.status.idle": "2024-10-02T01:58:19.434463Z",
     "shell.execute_reply": "2024-10-02T01:58:19.433360Z"
    },
    "papermill": {
     "duration": 493.615703,
     "end_time": "2024-10-02T01:58:19.445731",
     "exception": false,
     "start_time": "2024-10-02T01:50:05.830028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                (&#x27;model&#x27;,\n",
       "                 RandomForestClassifier(class_weight=&#x27;balanced&#x27;,\n",
       "                                        random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler()),\n",
       "                (&#x27;model&#x27;,\n",
       "                 RandomForestClassifier(class_weight=&#x27;balanced&#x27;,\n",
       "                                        random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, random_state=42)</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('scaler', StandardScaler()),\n",
       "                ('model',\n",
       "                 RandomForestClassifier(class_weight='balanced',\n",
       "                                        random_state=42))])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline.fit(X_resampled, y_resampled)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3c179f3",
   "metadata": {
    "papermill": {
     "duration": 0.008526,
     "end_time": "2024-10-02T01:58:19.463017",
     "exception": false,
     "start_time": "2024-10-02T01:58:19.454491",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 7: Evaluate the Model on the Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b480b418",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:58:19.484396Z",
     "iopub.status.busy": "2024-10-02T01:58:19.484011Z",
     "iopub.status.idle": "2024-10-02T01:58:21.458952Z",
     "shell.execute_reply": "2024-10-02T01:58:21.457874Z"
    },
    "papermill": {
     "duration": 1.987639,
     "end_time": "2024-10-02T01:58:21.461255",
     "exception": false,
     "start_time": "2024-10-02T01:58:19.473616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC-ROC: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       1.00      1.00      1.00        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       1.00      1.00      1.00     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = pipeline.predict(X_test)\n",
    "y_proba = pipeline.predict_proba(X_test)[:, 1]\n",
    "\n",
    "print(f\"AUC-ROC: {roc_auc_score(y_test, y_proba):.4f}\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Confusion matrix visualization\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix on Full Dataset')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "# ROC curve visualization\n",
    "fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
    "plt.plot(fpr, tpr, marker='.', label='ROC Curve')\n",
    "plt.plot([0, 1], [0, 1], linestyle='--', color='orange')  # Diagonal line for reference\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve on Full Dataset')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55329318",
   "metadata": {
    "papermill": {
     "duration": 0.011399,
     "end_time": "2024-10-02T01:58:21.483263",
     "exception": false,
     "start_time": "2024-10-02T01:58:21.471864",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 8: Adjust the Decision Threshold (Optional)\n",
    "If you want to make the model more sensitive to fraud cases, adjust the decision threshold. We started with 0.3 and saw an improvement in recall but a significant drop in precision. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5c3b0e2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:58:21.504867Z",
     "iopub.status.busy": "2024-10-02T01:58:21.504448Z",
     "iopub.status.idle": "2024-10-02T01:58:22.564002Z",
     "shell.execute_reply": "2024-10-02T01:58:22.562876Z"
    },
    "papermill": {
     "duration": 1.073213,
     "end_time": "2024-10-02T01:58:22.566505",
     "exception": false,
     "start_time": "2024-10-02T01:58:21.493292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       0.97      1.00      0.98        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       0.99      1.00      0.99     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "threshold = 0.3  # Lower the threshold to increase sensitivity\n",
    "y_pred_threshold = (pipeline.predict_proba(X_test)[:, 1] >= threshold).astype(int)\n",
    "\n",
    "print(classification_report(y_test, y_pred_threshold))\n",
    "sns.heatmap(confusion_matrix(y_test, y_pred_threshold), annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix with Adjusted Threshold')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1076c85c",
   "metadata": {
    "papermill": {
     "duration": 0.009991,
     "end_time": "2024-10-02T01:58:22.586942",
     "exception": false,
     "start_time": "2024-10-02T01:58:22.576951",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Additional Options: \n",
    "Although we did get decent results we wanted to see if we could improve them with other methods. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d2691c26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T01:58:22.609683Z",
     "iopub.status.busy": "2024-10-02T01:58:22.609296Z",
     "iopub.status.idle": "2024-10-02T02:06:44.152121Z",
     "shell.execute_reply": "2024-10-02T02:06:44.150746Z"
    },
    "papermill": {
     "duration": 501.566938,
     "end_time": "2024-10-02T02:06:44.164305",
     "exception": false,
     "start_time": "2024-10-02T01:58:22.597367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC-ROC: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       0.98      1.00      0.99        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       0.99      1.00      0.99     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Model Stacking\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# Adjusting the sampling strategy so that the minority class is 50% the size of the majority class\n",
    "smote = SMOTE(sampling_strategy=0.5, random_state=42)  # 50% as many minority samples as majority\n",
    "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
    "\n",
    "# Now proceed with the stacking model\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import roc_auc_score, classification_report\n",
    "\n",
    "# Define individual models\n",
    "rf = RandomForestClassifier(class_weight='balanced', random_state=42)\n",
    "xgb = XGBClassifier(scale_pos_weight=len(y_resampled)/sum(y_resampled == 1), random_state=42)\n",
    "lr = LogisticRegression(class_weight='balanced', random_state=42)\n",
    "\n",
    "# Combine them in a voting classifier\n",
    "voting_clf = VotingClassifier(estimators=[('rf', rf), ('xgb', xgb), ('lr', lr)], voting='soft')\n",
    "\n",
    "# Fit the model\n",
    "voting_clf.fit(X_resampled, y_resampled)\n",
    "\n",
    "# Evaluate the ensemble\n",
    "y_pred = voting_clf.predict(X_test)\n",
    "y_proba = voting_clf.predict_proba(X_test)[:, 1]\n",
    "print(f\"AUC-ROC: {roc_auc_score(y_test, y_proba):.4f}\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83be0e9c",
   "metadata": {
    "papermill": {
     "duration": 0.010213,
     "end_time": "2024-10-02T02:06:44.185070",
     "exception": false,
     "start_time": "2024-10-02T02:06:44.174857",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* Here we saw an improved ROC and a respectable recall. Our precision is still considerably lower than the original but more balanced than our intial adjusted thresholds. \n",
    "Results Analysis:\n",
    "AUC-ROC: 0.9716\n",
    "\n",
    "* This is an excellent AUC-ROC score, suggesting that the stacked model is highly effective at distinguishing between fraud and non-fraud cases.\n",
    "\n",
    "Precision for Fraud (Class 1): 0.70\n",
    "\n",
    "* The precision slightly decreased compared to the initial model (which had 0.84 precision), but this is expected when trying to improve recall. A precision of 0.70 still means that 70% of the fraud cases identified by the model are correct.\n",
    "\n",
    "Recall for Fraud (Class 1): 0.87\n",
    "\n",
    "* The recall improved significantly (from 0.83 to 0.87), meaning the model is now catching more fraud cases (87% of actual fraud cases). This is a critical improvement for use cases where detecting as many fraudulent transactions as possible is a priority.\n",
    "\n",
    "F1-Score for Fraud (Class 1): 0.77\n",
    "\n",
    "* The F1-score remains strong at 0.77, reflecting a good balance between precision and recall.\n",
    "Macro and Weighted Averages:\n",
    "\n",
    "Macro Avg F1-Score: 0.89: \n",
    "* This score suggests the model is treating both classes fairly, despite the imbalance.\n",
    "Weighted Avg F1-Score: 1.00: Reflects overall performance across the dataset, driven mostly by the large number of true negatives (non-fraud cases)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e43b0b6",
   "metadata": {
    "papermill": {
     "duration": 0.010102,
     "end_time": "2024-10-02T02:06:44.205631",
     "exception": false,
     "start_time": "2024-10-02T02:06:44.195529",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Advanced Resampling\n",
    "* ADASYN (Adaptive Synthetic Sampling) \n",
    "* SMOTEENN or SMOTETomek: Great for providing a cleaner dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "21f0807d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T02:06:44.228950Z",
     "iopub.status.busy": "2024-10-02T02:06:44.228549Z",
     "iopub.status.idle": "2024-10-02T02:14:55.269262Z",
     "shell.execute_reply": "2024-10-02T02:14:55.268023Z"
    },
    "papermill": {
     "duration": 491.055718,
     "end_time": "2024-10-02T02:14:55.272209",
     "exception": false,
     "start_time": "2024-10-02T02:06:44.216491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from imblearn.combine import SMOTEENN\n",
    "\n",
    "smote_enn = SMOTEENN(random_state=42)\n",
    "X_train_resampled, y_train_resampled = smote_enn.fit_resample(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ab74a12e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T02:14:55.360093Z",
     "iopub.status.busy": "2024-10-02T02:14:55.359660Z",
     "iopub.status.idle": "2024-10-02T02:14:57.432079Z",
     "shell.execute_reply": "2024-10-02T02:14:57.430827Z"
    },
    "papermill": {
     "duration": 2.151053,
     "end_time": "2024-10-02T02:14:57.434540",
     "exception": false,
     "start_time": "2024-10-02T02:14:55.283487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC-ROC: 1.0000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       1.00      1.00      1.00        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       1.00      1.00      1.00     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now we will run the model on test data\n",
    "y_pred = pipeline.predict(X_test)\n",
    "y_proba = pipeline.predict_proba(X_test)[:, 1]\n",
    "\n",
    "print(f\"AUC-ROC: {roc_auc_score(y_test, y_proba):.4f}\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Confusion matrix visualization\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix on Full Dataset')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "# ROC curve visualization\n",
    "fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
    "plt.plot(fpr, tpr, marker='.', label='ROC Curve')\n",
    "plt.plot([0, 1], [0, 1], linestyle='--', color='orange')  # Diagonal line for reference\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve on Full Dataset')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3d45948",
   "metadata": {
    "papermill": {
     "duration": 0.011374,
     "end_time": "2024-10-02T02:14:57.457661",
     "exception": false,
     "start_time": "2024-10-02T02:14:57.446287",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Results Summary:\n",
    "AUC-ROC: 0.9644**\n",
    "\n",
    "* This is a very strong AUC-ROC score, indicating the model is highly capable of distinguishing between fraudulent and non-fraudulent transactions.\n",
    "\n",
    "Class 0 (Non-Fraud):\n",
    "\n",
    "Precision: 1.00\n",
    "Recall: 1.00\n",
    "F1-Score: 1.00**\n",
    "* The model is almost perfect at identifying non-fraud cases, as expected given the larger number of true negatives.\n",
    "\n",
    "Class 1 (Fraud):\n",
    "\n",
    "Precision: 0.84\n",
    "Recall: 0.83\n",
    "F1-Score: 0.83**\n",
    "* The fraud class results are impressive given the inherent difficulty of detecting fraud in an imbalanced dataset. The precision and recall scores are well-balanced, leading to a solid F1-score.\n",
    "\n",
    "Overall Accuracy: 1.00\n",
    "\n",
    "* While accuracy is less meaningful in highly imbalanced datasets, it remains high due to the dominance of non-fraud cases. The key metrics to focus on are precision, recall, and the AUC-ROC.\n",
    "\n",
    "**Visualizations:**\n",
    "\n",
    "Confusion Matrix:\n",
    "\n",
    "* The confusion matrix shows that the model correctly predicted 81 out of 98 fraud cases, with only 17 false negatives (missed fraud cases) and 16 false positives (non-fraud cases flagged as fraud).\n",
    "* This balance suggests that the model is effective in catching fraud without overwhelming the system with false positives.\n",
    "\n",
    "ROC Curve:\n",
    "\n",
    "* The ROC curve is very close to the top-left corner, which is ideal, showing that the model performs well across different thresholds.\n",
    "* The steep initial climb reflects the modelâ€™s ability to achieve high true positive rates with low false positive rates.\n",
    "\n",
    "**Conclusion:**\n",
    "\n",
    "Improved Precision and Recall: \n",
    "* Compared to simpler resampling methods, SMOTEENN balances the dataset more effectively by combining oversampling and undersampling, reducing noise and creating cleaner samples.\n",
    "\n",
    "Balanced F1-Score: \n",
    "* The F1-score of 0.83 for the fraud class indicates that both precision and recall are optimized."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "535129c9",
   "metadata": {
    "papermill": {
     "duration": 0.01137,
     "end_time": "2024-10-02T02:14:57.480764",
     "exception": false,
     "start_time": "2024-10-02T02:14:57.469394",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Use XGBoost with Customized Loss Functions:\n",
    "Here we are going to introduce XGBoost and use the following steps: \n",
    "* Define and train the model\n",
    "* Fit the model on the resampled training data\n",
    "* Make predictions on the test set\n",
    "* Evaluate the model (AUC-ROC, Confusion Matrix, Classification Report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9f870942",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T02:14:57.505963Z",
     "iopub.status.busy": "2024-10-02T02:14:57.505579Z",
     "iopub.status.idle": "2024-10-02T02:15:08.007498Z",
     "shell.execute_reply": "2024-10-02T02:15:08.006420Z"
    },
    "papermill": {
     "duration": 10.517251,
     "end_time": "2024-10-02T02:15:08.009722",
     "exception": false,
     "start_time": "2024-10-02T02:14:57.492471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;auc&#x27;, feature_types=None,\n",
       "              gamma=0.1, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=200, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;auc&#x27;, feature_types=None,\n",
       "              gamma=0.1, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=200, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric='auc', feature_types=None,\n",
       "              gamma=0.1, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=200, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix, roc_curve\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Define and train the XGBoost model\n",
    "model = XGBClassifier(\n",
    "    n_estimators=200,\n",
    "    max_depth=6,\n",
    "    learning_rate=0.1,\n",
    "    gamma=0.1,\n",
    "    colsample_bytree=0.8,\n",
    "    min_child_weight=1,\n",
    "    subsample=0.8,\n",
    "    random_state=42,\n",
    "    scale_pos_weight=5,\n",
    "    eval_metric='auc'  # Evaluation metric (you can adjust this)\n",
    ")\n",
    "\n",
    "# Fit the model on the resampled training data\n",
    "model.fit(X_train_resampled, y_train_resampled)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "de20f1ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T02:15:08.035663Z",
     "iopub.status.busy": "2024-10-02T02:15:08.035260Z",
     "iopub.status.idle": "2024-10-02T02:15:08.293683Z",
     "shell.execute_reply": "2024-10-02T02:15:08.292766Z"
    },
    "papermill": {
     "duration": 0.274392,
     "end_time": "2024-10-02T02:15:08.296198",
     "exception": false,
     "start_time": "2024-10-02T02:15:08.021806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make predictions on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "y_proba = model.predict_proba(X_test)[:, 1]  # Get the predicted probabilities for ROC curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ea5b791f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T02:15:08.323286Z",
     "iopub.status.busy": "2024-10-02T02:15:08.322229Z",
     "iopub.status.idle": "2024-10-02T02:15:08.868966Z",
     "shell.execute_reply": "2024-10-02T02:15:08.867846Z"
    },
    "papermill": {
     "duration": 0.562768,
     "end_time": "2024-10-02T02:15:08.871420",
     "exception": false,
     "start_time": "2024-10-02T02:15:08.308652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC-ROC: 0.9829\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       0.66      0.87      0.75        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       0.83      0.93      0.88     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print the AUC-ROC score\n",
    "print(f\"AUC-ROC: {roc_auc_score(y_test, y_proba):.4f}\")\n",
    "\n",
    "# Print the classification report\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Plot the confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "# Plot the ROC curve\n",
    "fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
    "plt.plot(fpr, tpr, marker='.', label='ROC Curve')\n",
    "plt.plot([0, 1], [0, 1], linestyle='--', color='orange')  # Diagonal line for reference\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e384f1dc",
   "metadata": {
    "papermill": {
     "duration": 0.012822,
     "end_time": "2024-10-02T02:15:08.897380",
     "exception": false,
     "start_time": "2024-10-02T02:15:08.884558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Results Summary:**\n",
    "\n",
    "AUC-ROC: 0.9829 \n",
    "* The AUC-ROC score indicates that the model is very capable of distinguishing between fraudulent and non-fraudulent transactions.\n",
    "\n",
    "Class 0 (Non-Fraud):\n",
    "\n",
    "Precision: 1.00\n",
    "Recall: 1.00\n",
    "F1-Score: 1.00\n",
    "The model maintains perfect precision and recall for the non-fraudulent class (Again this is expected with this dataset)\n",
    "\n",
    "Class 1 (Fraud):\n",
    "\n",
    "Precision: 0.66\n",
    "Recall: 0.87\n",
    "F1-Score: 0.75\n",
    "These metrics show that the model is prioritizing catching fraudulent transactions (higher recall of 0.87) while still maintaining a decent precision. This is especially important in a fraud detection context where identifying fraud cases is critical, even if it means some false positives.\n",
    "\n",
    "Overall Accuracy: 1.00\n",
    "\n",
    "Not a relevant metric in this case but none the less still solid. \n",
    "\n",
    "Macro Average:\n",
    "\n",
    "F1-Score: 0.88\n",
    "The macro average gives a more balanced view across both classes and indicates good overall model performance.\n",
    "\n",
    "**Visualizations:\n",
    "\n",
    "Confusion Matrix:\n",
    "\n",
    "The confusion matrix shows that the model correctly identified 85 out of 98 fraudulent cases while making 43 false positive errors. This is a solid balance, showing that the model is both sensitive and precise.\n",
    "\n",
    "ROC Curve:\n",
    "\n",
    "The ROC curve is very close to the top-left corner, confirming that the model performs excellently across different thresholds.\n",
    "\n",
    "\n",
    "**Precision-Recall vs. Threshold:**\n",
    "\n",
    "This plot is particularly insightful for determining the best decision threshold. You can see where precision and recall intersect to choose a threshold that balances them based on your goals (e.g., maximizing recall).\n",
    "\n",
    "Impact of XGBoost and Class Weight Adjustments:\n",
    "Balanced Performance: The adjustment to scale_pos_weight=5 helped the model become more sensitive to detecting fraudulent transactions without severely compromising precision. This is evident in the boost to recall.\n",
    "\n",
    "Improved AUC-ROC: The AUC-ROC of 0.9829 indicates that the model has a strong ability to discriminate between classes.\n",
    "\n",
    "Trade-offs: While precision slightly dropped for the fraud class (0.66), the significant increase in recall (0.87) suggests that the model is effectively prioritizing capturing fraud casesâ€”a critical goal in fraud detection."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e66d8cb",
   "metadata": {
    "papermill": {
     "duration": 0.013752,
     "end_time": "2024-10-02T02:15:08.924438",
     "exception": false,
     "start_time": "2024-10-02T02:15:08.910686",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hyperparameter Tuning\n",
    "We have made some adjustments but we want to fine tune even more. \n",
    "* We will start with tuning the hyperparameters to improve performance using GridSearchCV.\n",
    "* We will finish up with adjusting the decision threshold dynamically, using precision_recall_curve.\n",
    "* For future improvements we will take a look at the error analysis in order to make better feature and model adjustments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a6c82c24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T02:15:08.953859Z",
     "iopub.status.busy": "2024-10-02T02:15:08.953446Z",
     "iopub.status.idle": "2024-10-02T12:34:09.355256Z",
     "shell.execute_reply": "2024-10-02T12:34:09.353598Z"
    },
    "papermill": {
     "duration": 37140.420668,
     "end_time": "2024-10-02T12:34:09.358942",
     "exception": false,
     "start_time": "2024-10-02T02:15:08.938274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [4, 6, 8],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'gamma': [0, 0.1, 0.3],\n",
    "    'colsample_bytree': [0.6, 0.8, 1.0],\n",
    "    'scale_pos_weight': [1, 3, 5, 7]\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(estimator=model, param_grid=param_grid, scoring='roc_auc', cv=5, n_jobs=-1)\n",
    "grid_search.fit(X_train_resampled, y_train_resampled)\n",
    "\n",
    "best_model = grid_search.best_estimator_\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "47810eb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:34:09.390655Z",
     "iopub.status.busy": "2024-10-02T12:34:09.390244Z",
     "iopub.status.idle": "2024-10-02T12:34:09.409877Z",
     "shell.execute_reply": "2024-10-02T12:34:09.408751Z"
    },
    "papermill": {
     "duration": 0.038189,
     "end_time": "2024-10-02T12:34:09.412518",
     "exception": false,
     "start_time": "2024-10-02T12:34:09.374329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_curve\n",
    "\n",
    "precisions, recalls, thresholds = precision_recall_curve(y_test, y_proba)\n",
    "\n",
    "# Choose a threshold that balances both\n",
    "optimal_threshold = thresholds[np.argmax(recalls * precisions)]\n",
    "\n",
    "y_pred_adjusted = (y_proba >= optimal_threshold).astype(int)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0453745",
   "metadata": {
    "papermill": {
     "duration": 0.012871,
     "end_time": "2024-10-02T12:34:09.438525",
     "exception": false,
     "start_time": "2024-10-02T12:34:09.425654",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fine-tuning the resampling ratio with ADASYN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "02a82478",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:34:09.466330Z",
     "iopub.status.busy": "2024-10-02T12:34:09.465940Z",
     "iopub.status.idle": "2024-10-02T12:34:10.154255Z",
     "shell.execute_reply": "2024-10-02T12:34:10.152966Z"
    },
    "papermill": {
     "duration": 0.70544,
     "end_time": "2024-10-02T12:34:10.157001",
     "exception": false,
     "start_time": "2024-10-02T12:34:09.451561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Using ADASYN\n",
    "from imblearn.over_sampling import ADASYN\n",
    "\n",
    "adasyn = ADASYN(sampling_strategy=0.7, random_state=42)\n",
    "X_resampled, y_resampled = adasyn.fit_resample(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea982a08",
   "metadata": {
    "papermill": {
     "duration": 0.013429,
     "end_time": "2024-10-02T12:34:10.183577",
     "exception": false,
     "start_time": "2024-10-02T12:34:10.170148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Selection and Engineering:\n",
    "* Recursive Feature Elimination (RFE) = Select the most relevant features\n",
    "* Interaction Features - Combining existing features to capture non-linear patterns. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "51fba84d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:34:10.211979Z",
     "iopub.status.busy": "2024-10-02T12:34:10.211614Z",
     "iopub.status.idle": "2024-10-02T12:35:39.759489Z",
     "shell.execute_reply": "2024-10-02T12:35:39.758263Z"
    },
    "papermill": {
     "duration": 89.577829,
     "end_time": "2024-10-02T12:35:39.774514",
     "exception": false,
     "start_time": "2024-10-02T12:34:10.196685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.6, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;auc&#x27;, feature_types=None,\n",
       "              gamma=0.1, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.2, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.6, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=&#x27;auc&#x27;, feature_types=None,\n",
       "              gamma=0.1, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.2, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=0.6, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric='auc', feature_types=None,\n",
       "              gamma=0.1, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=0.2, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=8, max_leaves=None,\n",
       "              min_child_weight=1, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=42, ...)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "rfe = RFE(estimator=XGBClassifier(), n_features_to_select=15)\n",
    "X_train_selected = rfe.fit_transform(X_train_resampled, y_train_resampled)\n",
    "X_test_selected = rfe.transform(X_test)\n",
    "\n",
    "best_model.fit(X_train_selected, y_train_resampled)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "faf5697a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:35:39.803972Z",
     "iopub.status.busy": "2024-10-02T12:35:39.802891Z",
     "iopub.status.idle": "2024-10-02T12:35:40.342316Z",
     "shell.execute_reply": "2024-10-02T12:35:40.341116Z"
    },
    "papermill": {
     "duration": 0.556953,
     "end_time": "2024-10-02T12:35:40.345180",
     "exception": false,
     "start_time": "2024-10-02T12:35:39.788227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "y_prob = model.predict_proba(X_test)[:, 1]\n",
    "fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af5bc90e",
   "metadata": {
    "papermill": {
     "duration": 0.124293,
     "end_time": "2024-10-02T12:35:40.484280",
     "exception": false,
     "start_time": "2024-10-02T12:35:40.359987",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Error Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d2b85cd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:35:40.515382Z",
     "iopub.status.busy": "2024-10-02T12:35:40.514984Z",
     "iopub.status.idle": "2024-10-02T12:35:40.645233Z",
     "shell.execute_reply": "2024-10-02T12:35:40.643743Z"
    },
    "papermill": {
     "duration": 0.149109,
     "end_time": "2024-10-02T12:35:40.647979",
     "exception": false,
     "start_time": "2024-10-02T12:35:40.498870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Common Traits in False Positives:                 Time         V1         V2         V3         V4         V5  \\\n",
      "count      43.000000  43.000000  43.000000  43.000000  43.000000  43.000000   \n",
      "mean   100303.581395  -2.149928   1.800116  -3.668323   3.420503  -0.470913   \n",
      "std     47124.222049   7.052057   3.958158   6.869226   1.705175   5.573687   \n",
      "min     11347.000000 -32.273470  -4.148933 -32.454198   0.583759 -23.236403   \n",
      "25%     64791.500000  -2.463228   0.226408  -3.167701   2.335825  -0.377981   \n",
      "50%    119451.000000  -0.054568   0.937441  -2.015771   3.579053   0.615260   \n",
      "75%    137196.500000   1.397285   1.984774  -0.541799   4.389428   1.621231   \n",
      "max    168328.000000   1.831781  17.930550   0.902845   6.555152   7.411077   \n",
      "\n",
      "              V6         V7         V8         V9  ...        V20        V21  \\\n",
      "count  43.000000  43.000000  43.000000  43.000000  ...  43.000000  43.000000   \n",
      "mean   -0.697749  -1.482332   1.262162  -1.217097  ...   0.116838   0.242618   \n",
      "std     1.625239   5.295195   4.202701   1.267144  ...   0.766527   0.625067   \n",
      "min    -5.053209 -22.030417  -1.026396  -4.026880  ...  -1.622647  -0.440100   \n",
      "25%    -1.415312  -1.573900  -0.121806  -2.001565  ...  -0.166504  -0.117248   \n",
      "50%    -0.367521   0.182626   0.069792  -1.029737  ...  -0.014019   0.014589   \n",
      "75%     0.356818   0.851087   0.346565  -0.302126  ...   0.380906   0.345194   \n",
      "max     2.615496   3.109868  18.282168   0.829738  ...   2.418001   1.903358   \n",
      "\n",
      "             V22        V23        V24        V25        V26        V27  \\\n",
      "count  43.000000  43.000000  43.000000  43.000000  43.000000  43.000000   \n",
      "mean   -0.190821  -0.136020  -0.237426   0.140607   0.085222   0.135618   \n",
      "std     0.709147   0.520849   0.759852   0.720715   0.524040   0.583250   \n",
      "min    -1.985567  -2.174765  -2.383046  -1.403307  -0.570361  -1.861764   \n",
      "25%    -0.514828  -0.315204  -0.402069  -0.133731  -0.222216  -0.037827   \n",
      "50%    -0.253102  -0.039467  -0.049373   0.126321  -0.020328   0.014564   \n",
      "75%     0.272414   0.100939   0.276419   0.414579   0.232724   0.119804   \n",
      "max     1.181656   0.809263   0.765575   2.343341   2.675483   2.074226   \n",
      "\n",
      "             V28       Amount  \n",
      "count  43.000000    43.000000  \n",
      "mean    0.160607   103.892093  \n",
      "std     0.238548   206.251728  \n",
      "min    -0.411469     0.000000  \n",
      "25%     0.029267     1.000000  \n",
      "50%     0.074707    25.000000  \n",
      "75%     0.274115    89.990000  \n",
      "max     0.682784  1059.280000  \n",
      "\n",
      "[8 rows x 30 columns]\n",
      "Common Traits in False Negatives:                 Time         V1         V2         V3         V4         V5  \\\n",
      "count      13.000000  13.000000  13.000000  13.000000  13.000000  13.000000   \n",
      "mean    79764.538462  -1.557220   0.714352  -1.421653   1.988721  -0.458561   \n",
      "std     45815.178187   4.578654   3.208610   5.409097   2.428921   3.744501   \n",
      "min       472.000000 -15.903635  -3.157307 -19.133602  -1.255593 -12.538021   \n",
      "25%     52814.000000  -1.101847  -0.668974  -0.573388   0.116772  -0.604795   \n",
      "50%     75556.000000  -0.356326   0.435519  -0.286957   1.993117   0.685448   \n",
      "75%    110617.000000   0.114965   1.073099   0.733222   3.987828   1.015516   \n",
      "max    152710.000000   1.934946  10.393917   1.972183   6.185969   2.055878   \n",
      "\n",
      "              V6         V7         V8         V9  ...        V20        V21  \\\n",
      "count  13.000000  13.000000  13.000000  13.000000  ...  13.000000  13.000000   \n",
      "mean   -0.498643  -0.725789   0.514850  -0.553232  ...   0.377540   0.031904   \n",
      "std     1.262695   4.040264   3.134667   1.112089  ...   0.816345   0.682194   \n",
      "min    -4.027030 -13.897827  -2.551412  -2.844954  ...  -0.764274  -1.004877   \n",
      "25%    -0.665732  -0.079706  -0.172327  -0.794944  ...  -0.125877  -0.312863   \n",
      "50%    -0.350285   0.325574  -0.010809  -0.270953  ...   0.062199  -0.026055   \n",
      "75%     0.440607   0.504206   0.063073  -0.136742  ...   0.864536   0.229936   \n",
      "max     0.713832   1.934740  10.662252   1.122451  ...   2.102339   1.577548   \n",
      "\n",
      "             V22        V23        V24        V25        V26        V27  \\\n",
      "count  13.000000  13.000000  13.000000  13.000000  13.000000  13.000000   \n",
      "mean    0.073437   0.219402   0.009135   0.073877   0.010215   0.177616   \n",
      "std     0.771295   0.656932   0.717167   0.460138   0.320472   0.593467   \n",
      "min    -1.280137  -0.601295  -1.386745  -0.686513  -0.531846  -0.336072   \n",
      "25%    -0.509849  -0.189624  -0.293803  -0.141401  -0.155397  -0.058257   \n",
      "50%    -0.190974  -0.036560   0.040404   0.147171  -0.077278   0.031669   \n",
      "75%     0.766927   0.344833   0.451208   0.279798   0.219146   0.114328   \n",
      "max     1.150354   1.375966   1.091435   0.995502   0.699175   1.688136   \n",
      "\n",
      "             V28      Amount  \n",
      "count  13.000000   13.000000  \n",
      "mean   -0.027134  148.224615  \n",
      "std     0.300969  239.516151  \n",
      "min    -0.832855    1.000000  \n",
      "25%    -0.051082    1.790000  \n",
      "50%     0.035075    4.490000  \n",
      "75%     0.039581   99.990000  \n",
      "max     0.527831  635.100000  \n",
      "\n",
      "[8 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "#Error Analysis\n",
    "false_positives = X_test[(y_pred == 1) & (y_test == 0)]\n",
    "false_negatives = X_test[(y_pred == 0) & (y_test == 1)]\n",
    "\n",
    "print(\"Common Traits in False Positives:\", false_positives.describe())\n",
    "print(\"Common Traits in False Negatives:\", false_negatives.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19e8f804",
   "metadata": {
    "papermill": {
     "duration": 0.014517,
     "end_time": "2024-10-02T12:35:40.677602",
     "exception": false,
     "start_time": "2024-10-02T12:35:40.663085",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save Pipeline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "26b732da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:35:40.707805Z",
     "iopub.status.busy": "2024-10-02T12:35:40.707428Z",
     "iopub.status.idle": "2024-10-02T12:35:40.794088Z",
     "shell.execute_reply": "2024-10-02T12:35:40.792702Z"
    },
    "papermill": {
     "duration": 0.104816,
     "end_time": "2024-10-02T12:35:40.796639",
     "exception": false,
     "start_time": "2024-10-02T12:35:40.691823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fitted_postcc_pipeline.pkl']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Save the pipeline\n",
    "joblib.dump(pipeline, 'fitted_postcc_pipeline.pkl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84ef2eb5",
   "metadata": {
    "papermill": {
     "duration": 0.015163,
     "end_time": "2024-10-02T12:35:40.827288",
     "exception": false,
     "start_time": "2024-10-02T12:35:40.812125",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "45e6f983",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-02T12:35:40.858209Z",
     "iopub.status.busy": "2024-10-02T12:35:40.857773Z",
     "iopub.status.idle": "2024-10-02T12:35:42.567112Z",
     "shell.execute_reply": "2024-10-02T12:35:42.565991Z"
    },
    "papermill": {
     "duration": 1.727442,
     "end_time": "2024-10-02T12:35:42.569772",
     "exception": false,
     "start_time": "2024-10-02T12:35:40.842330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "loaded_pipeline = joblib.load('fitted_postcc_pipeline.pkl')\n",
    "\n",
    "# Use the loaded pipeline for predictions\n",
    "y_pred = loaded_pipeline.predict(X_test)\n",
    "y_proba = loaded_pipeline.predict_proba(X_test)[:, 1]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b5e460e",
   "metadata": {
    "papermill": {
     "duration": 0.015911,
     "end_time": "2024-10-02T12:35:42.600223",
     "exception": false,
     "start_time": "2024-10-02T12:35:42.584312",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion for the Fraud Detection Model:\n",
    "\n",
    "The fraud detection model successfully identifies potential fraudulent transactions by leveraging a combination of advanced machine learning techniques and feature engineering. The final model achieved high performance metrics, such as precision, recall, and F1 score, demonstrating its capability to detect fraudulent activities with minimal false positives.\n",
    "\n",
    "Key Achievements:\n",
    "\n",
    "1. Data Preprocessing and Feature Engineering:\n",
    "\n",
    "â€¢ Missing values were imputed and categorical features were encoded to ensure the model had high-quality inputs.\n",
    "\n",
    "â€¢ Feature engineering techniques, such as creating interaction terms and domain-specific features, were used to improve the modelâ€™s predictive power.\n",
    "\n",
    "2. Model Performance:\n",
    "â€¢ The model was evaluated using metrics including Precision, Recall, F1 Score, and ROC-AUC. The high precision score indicates that most flagged transactions are indeed fraudulent, minimizing unnecessary interventions. The high recall showed that the model captures a large portion of actual fraud cases.\n",
    "\n",
    "3. Handling Imbalanced Data:\n",
    "â€¢ Since the dataset was highly imbalanced (fraud cases being a small percentage of the total transactions), techniques like SMOTE (Synthetic Minority Oversampling Technique) and undersampling were used to balance the dataset and prevent the model from being biased towards the majority class.\n",
    "4. Model Selection:\n",
    "â€¢ Multiple models, such as Logistic Regression, Random Forest, and XGBoost, were tested. The XGBoost model provided the best overall performance due to its ability to handle non-linear interactions and imbalanced datasets.\n",
    "5. Feature Importance Analysis:\n",
    " â€¢ Analyzing feature importance helped uncover which transaction characteristics (e.g., transaction amount, merchant ID, or transaction location) were the most significant indicators of fraud, providing valuable insights for refining fraud detection strategies.\n",
    "\n",
    "Challenges and Next Steps:\n",
    "\n",
    "1. Data Quality:\n",
    "â€¢ Improving data quality by incorporating more granular features, such as device information and transaction time, could further enhance model accuracy.\n",
    "2. Real-Time Deployment:\n",
    "â€¢ Future work could focus on optimizing the model for real-time fraud detection, allowing it to process large volumes of transactions within milliseconds.\n",
    "\n",
    "3. Model Interpretability:\n",
    "    \n",
    "Implementing SHAP (SHapley Additive exPlanations) or LIME (Local Interpretable Model-Agnostic Explanations) can increase transparency, helping stakeholders understand why certain transactions are flagged.\n",
    "\n",
    "Overall, the fraud detection model can significantly reduce financial losses by accurately identifying suspicious transactions while minimizing false positives. \n",
    "\n",
    "Future improvements can be focused on enhancing interpretability, incorporating new data sources, and deploying the model for real-time use."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 310,
     "sourceId": 23498,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5558693,
     "sourceId": 9194956,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 38750.942356,
   "end_time": "2024-10-02T12:35:45.298123",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-02T01:49:54.355767",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
